-- Creating Tables
CREATE TABLE character (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    armor_class INTEGER NOT NULL,
    initiative_modifier INTEGER NOT NULL,
    max_health INTEGER NOT NULL,
    current_health INTEGER NOT NULL,
    character_template_id INTEGER,
    copy INTEGER,
    FOREIGN KEY (character_template_id) REFERENCES characterTemplate(id)
);

CREATE TABLE characterTemplate (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    type TEXT,
    description TEXT
);

CREATE TABLE status (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    duration INTEGER,
    magnitude INTEGER,
    save INTEGER,
    description TEXT
);

CREATE TABLE ability (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    character_template_id INTEGER NOT NULL,
    description TEXT,
    type TEXT,
    magnitude INTEGER,
    hit_modifier INTEGER,
    save INTEGER,
    magnitude_modifier INTEGER,
    status_id INTEGER,
    FOREIGN KEY (status_id) REFERENCES status(id),
    FOREIGN KEY (character_template_id) REFERENCES characterTemplate(id)
);

CREATE TABLE characterEncounterList (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    character_id INTEGER NOT NULL,
    initiative INTEGER,
    encounter_id INTEGER NOT NULL
);

CREATE TABLE encounter (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT
);

-- Creating Queries

-- Characters
selectAllCharacters:
SELECT *
FROM character
WHERE character_template_id IS NULL;

insertCharacter:
INSERT INTO character( name, armor_class, initiative_modifier, max_health, current_health, character_template_id, copy )
VALUES ( ?, ?, ?, ?, ?, ?, ? );

selectCharacterByID:
SELECT *
FROM character
WHERE id = ?;

updateCharacterByID:
UPDATE character
SET name = ?, armor_class = ?, initiative_modifier = ?, max_health = ?, current_health = ?, character_template_id = ?
WHERE id = ?;

deleteCharacterByID:
DELETE FROM character
WHERE id = ?;

selectCharacters:
SELECT *
FROM character
WHERE name LIKE ? AND armor_class LIKE ? AND initiative_modifier LIKE ? AND max_health LIKE ? AND current_health LIKE ?;

-- PC's
selectAllPlayerCharacters:
SELECT *
FROM character
WHERE character_template_id IS NULL;

selectPlayerCharacters:
SELECT *
FROM character
WHERE name LIKE ? AND armor_class LIKE ? AND initiative_modifier LIKE ? AND max_health LIKE ? AND current_health LIKE ?
AND character_template_id IS NULL;

-- NPC's
selectAllCharactersWithTemplate:
SELECT *
FROM character
INNER JOIN characterTemplate
ON character.character_template_id = characterTemplate.id
WHERE character_template_id IS NOT NULL AND copy IS NULL;

selectCharactersWithTemplate:
SELECT *
FROM character
LEFT JOIN characterTemplate
ON character.character_template_id = characterTemplate.id
WHERE name LIKE ? AND armor_class LIKE ? AND initiative_modifier LIKE ? AND max_health LIKE ? AND current_health LIKE ? AND type = ? AND description LIKE ?;

-- Templates
selectAllTemplates:
SELECT *
FROM characterTemplate;

selectTemplates:
SELECT *
FROM characterTemplate
WHERE id LIKE ? AND type LIKE ? AND description LIKE ?;

selectTemplateByID:
SELECT *
FROM characterTemplate
WHERE id = ?;

insertTemplate:
INSERT INTO characterTemplate( type, description )
VALUES ( ?, ? );

deleteTemplate:
DELETE FROM characterTemplate
WHERE id = ?;

updateTemplateByID:
UPDATE characterTemplate
SET type = ?, description = ?
WHERE id = ?;

-- Encounters
selectAllEncounters:
SELECT *
FROM encounter;

selectEncounterByID:
SELECT *
FROM encounter
WHERE encounter.id = ?;

insertEncounter:
INSERT INTO encounter( name )
VALUES ( ? );

selectCharactersNotIn:
SELECT *
FROM character
LEFT JOIN characterEncounterList ON characterEncounterList.character_id = character.id
WHERE character_template_id IS NULL
AND (characterEncounterList.encounter_id IS NULL
OR characterEncounterList.encounter_id IS NOT ?);

selectNPCNotIn:
SELECT *
FROM character
LEFT JOIN characterEncounterList ON characterEncounterList.character_id = character.id
WHERE character_template_id IS NOT NULL
AND (characterEncounterList.encounter_id IS NULL
OR characterEncounterList.encounter_id IS NOT ?);

selectCharactersIn:
SELECT *
FROM character
INNER JOIN characterEncounterList ON character.id = characterEncounterList.character_id
LEFT JOIN characterTemplate ON character.character_template_id = characterTemplate.id
WHERE encounter_id = ?;

addCharacterToEncounter:
INSERT INTO characterEncounterList ( character_id, encounter_id )
VALUES ( ?, ? );

removeCharacterFromEncounter:
DELETE FROM characterEncounterList
WHERE id = ?;

setInitiative:
UPDATE characterEncounterList
SET initiative = ?
WHERE id = ?;

selectCharacterListing:
SELECT *
FROM characterEncounterList
WHERE id = ?;

setCharacterHealth:
UPDATE character
SET current_health = ?
WHERE id = ?;

getCharacterHealth:
SELECT current_health
FROM character
WHERE id = ?;

-- Helper
lastInsertRowId:
SELECT last_insert_rowid();